{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","primary","background","paper2","customArea","width","resize","borderRadius","minHeight","firstGrid","marginTop","pokeImg","height","App","GET_POKEMON_INFO","gql","useQuery","data","loading","error","classes","className","CssBaseline","Grid","container","justify","item","xs","maingrid","sm","Paper","Typography","variant","Box","p","Divider","orientation","readOnly","value","loc","source","body","pokemons","map","pokemon","index","key","image","src","alt","number","name","weight","classification","Boolean","window","location","hostname","match","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.32e497ea.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Paper, Typography, Divider, Box } from '@material-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    background: '#f2f2f2',\n  },\n  paper2: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n  },\n  customArea: {\n    width: '100%',\n    resize: 'none',\n    background: 'linear-gradient(45deg, #3B3B3B 30%, #515151 90%)',\n    borderRadius: 10,\n    color: '#ffffff',\n    minHeight: '250px',\n  },\n  firstGrid: {\n    marginTop: 15,\n  },\n  pokeImg: {\n    width: 150,\n    height: 150,\n  }\n}));\n\nfunction App() {\n  const GET_POKEMON_INFO = gql(`\n  {\n      pokemons(first: 151) {\n        id\n        number\n        name,\n        image,\n        evolutions {\n          id,\n          number,\n          name,\n          image\n        }\n      }\n    }`);\n\n  const { data, loading, error } = useQuery(GET_POKEMON_INFO);\n\n  const classes = styles();\n\n  return (\n    <div className={classes.root}>\n    <CssBaseline />\n    <Grid container justify=\"center\" className={classes.firstGrid}>\n    <Grid container item xs={11} className={classes.maingrid} spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\">Search Control for API</Typography>\n            <Box p={2}>\n              <Divider orientation=\"horizontal\" />\n            </Box>\n            <Typography variant=\"body1\">Search Term 1</Typography>\n            <Grid container>\n              <Grid item>\n                \n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\">GraphQL Query</Typography>\n            <Box p={2}>\n              <Divider orientation=\"horizontal\" />\n            </Box>\n            <textarea readOnly className={classes.customArea} value={GET_POKEMON_INFO.loc.source.body}></textarea>\n          </Paper>\n        </Grid>\n            { loading ? <p>Loading...</p> : null}\n            { error ? <p>{error}</p> : null }\n            { data ?\n              data.pokemons ?\n              data.pokemons.map((pokemon,index) => (\n              <Grid item xs={12} sm={3} key={index}>\n                <Paper className={classes.paper2}>\n                {pokemon.image ? <img src={pokemon.image} className={classes.pokeImg} alt=\"Pokemon\"/> : null}\n                {pokemon.number ? <Typography>Number: {pokemon.number}</Typography> : null}\n                {pokemon.name ? <Typography>Name: {pokemon.name}</Typography> : null}\n                {pokemon.weight ? <Typography>Weight: {pokemon.weight}</Typography> : null}\n                {pokemon.height ? <Typography>Height: {pokemon.height}</Typography> : null}\n                {pokemon.classification ? <Typography>Classification: {pokemon.classification}</Typography> : null}\n                </Paper>\n              </Grid>\n              ))\n              : null\n              : null\n            }\n    </Grid>\n    </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://graphql-pokemon.now.sh/'\n})\n\nconst client = new ApolloClient({\n  cache,\n  link\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}