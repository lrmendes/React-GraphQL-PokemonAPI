{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","primary","background","paper2","customArea","width","resize","borderRadius","minHeight","firstGrid","marginTop","pokeImg","height","App","useState","cbId","cbNumber","cbName","weight","cbClassification","types","resistant","attacks","weakness","cbFleeRate","cbMaxCP","evolutions","evolutionRequirements","cbMaxHP","cbImage","query","setQuery","React","state","setState","stringQuery","setStringQuery","GET_POKEMON_INFO","gql","useQuery","data","loading","error","handleChange","event","target","name","checked","useEffect","newQuery","concat","console","log","toString","createQuery","classes","className","CssBaseline","Grid","container","justify","item","xs","maingrid","sm","Paper","Typography","variant","Box","p","Divider","orientation","direction","FormControlLabel","control","Checkbox","onChange","label","checkedA","checkedB","checkedC","checkedD","readOnly","value","pokemons","map","pokemon","index","key","image","src","alt","id","number","classification","JSON","stringify","Boolean","window","location","hostname","match","cache","InMemoryCache","addTypename","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fbb5e7b6.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Grid, Paper, Typography, Divider, Box, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    background: '#f2f2f2',\n  },\n  paper2: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n  },\n  customArea: {\n    width: '100%',\n    resize: 'none',\n    background: 'linear-gradient(45deg, #3B3B3B 30%, #515151 90%)',\n    borderRadius: 10,\n    color: '#ffffff',\n    minHeight: '250px',\n  },\n  firstGrid: {\n    marginTop: 15,\n  },\n  pokeImg: {\n    width: 150,\n    height: 150,\n  }\n}));\n\nfunction App() {\n  const [query,setQuery] = useState({\n    cbId: false,\n    cbNumber: true,\n    cbName: true,\n    weight: false,                 // Array PokemonWeight\n    height: false,                 // Array PokemonDimension\n    cbClassification: false, \n    types: false,                  // Array String\n    resistant: false,              // Array String\n    attacks: false,                // Array PokemonAttack\n    weakness: false,               // Array String\n    cbFleeRate: false,\n    cbMaxCP: false,\n    evolutions: false,             // Array Pokemon\n    evolutionRequirements: false,  // Array PokemonEvolutionRequirement\n    cbMaxHP: false,\n    cbImage: true,\n  });\n  const [onlyOne, setOnlyOne] = useState(false);\n\n  const [state, setState] = React.useState({\n    cbId: false,\n    cbNumber: true,\n    cbName: true,\n    cbImage: true,\n  });\n\n  const [stringQuery, setStringQuery] = useState(`{\\n  pokemons(first: 30) {\\n\\tnumber,\\n\\tname,\\n\\timage,\\n  }\\n}`);\n\n  function createQuery() {\n    let newQuery = `{\\n  pokemons(first: 30) {\\n`;\n    (query.cbId !== false ? newQuery = newQuery.concat(\"\\tid,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbNumber !== false ? newQuery = newQuery.concat(\"\\tnumber,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbName !== false ? newQuery = newQuery.concat(\"\\tname,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbClassification !== false ? newQuery = newQuery.concat(\"\\tclassification,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbFleeRate !== false ? newQuery = newQuery.concat(\"\\tfleeRate,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbMaxCP !== false ? newQuery = newQuery.concat(\"\\tmaxCP,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbMaxHP !== false ? newQuery = newQuery.concat(\"\\tmaxHP,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbImage !== false ? newQuery = newQuery.concat(\"\\timage,\\n\") : newQuery = newQuery.concat(\"\"));\n    newQuery = newQuery.concat(`  }\\n}`);\n\n    setStringQuery(newQuery);\n\n    console.log(newQuery.toString());\n    console.log(query);\n    return\n  }\n\n  /*\n  const GET_POKEMON_INFO = gql(`\n  {\n    pokemons(first: 30) {\n      id\n      number\n      name,\n      image,\n      evolutions {\n        id,\n        number,\n        name,\n        image\n      }\n    }\n  }`);\n  */\n\n  const GET_POKEMON_INFO = gql(`\n  {\n    pokemons(first: 30) {\n      number,\n      name,\n      image,\n    }\n  }`);\n  const {data, loading, error} = useQuery(GET_POKEMON_INFO);\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    setQuery({...query, [event.target.name]: event.target.checked})\n  };\n\n  useEffect(() => {\n    createQuery();\n  },[query]);\n\n  const classes = styles();\n\n  return (\n    <div className={classes.root}>\n    <CssBaseline />\n    <Grid container justify=\"center\" className={classes.firstGrid}>\n    <Grid container item xs={11} className={classes.maingrid} spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\">Search Control for API</Typography>\n            <Box p={2}>\n              <Divider orientation=\"horizontal\" />\n            </Box>\n            <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={6} sm={6}>\n              <Paper className={classes.paper2}>\n                <Typography variant=\"body1\">Pokemon Attributes</Typography>\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbId} onChange={handleChange} name=\"cbId\" />}\n                  label=\"ID\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbNumber} onChange={handleChange} name=\"cbNumber\" />}\n                  label=\"Number\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbName} onChange={handleChange} name=\"cbName\" />}\n                  label=\"Name\"\n                />\n                \n                <FormControlLabel\n                  control={<Checkbox checked={state.cbImage} onChange={handleChange} name=\"cbImage\" />}\n                  label=\"Image\"\n                />\n              </Paper>\n              </Grid>\n              <Grid item xs={6} sm={6}>\n              <Paper className={classes.paper2}>\n              <Typography variant=\"body1\">Evolution Attributes</Typography>\n              <FormControlLabel\n                control={<Checkbox checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n                label=\"ID\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={state.checkedB} onChange={handleChange} name=\"checkedB\" />}\n                label=\"Number\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={state.checkedC} onChange={handleChange} name=\"checkedC\" />}\n                label=\"Name\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={state.checkedD} onChange={handleChange} name=\"checkedD\" />}\n                label=\"Image\"\n              />\n              </Paper>\n              </Grid> \n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\">GraphQL Query</Typography>\n            <Box p={2}>\n              <Divider orientation=\"horizontal\" />\n            </Box>\n            <textarea readOnly className={classes.customArea} value={stringQuery}></textarea>\n          </Paper>\n        </Grid>\n            { console.log(data) }\n            { loading ? <p>Loading...</p> : null}\n            { error ? <p>{error}</p> : null }\n            { data ?\n              data.pokemons ?\n              data.pokemons.map((pokemon,index) => (\n              <Grid item xs={12} sm={3} key={index}>\n                <Paper className={classes.paper2}>\n                {pokemon.image ? <img src={pokemon.image} className={classes.pokeImg} alt=\"Pokemon\"/> : null}\n                {pokemon.id ? <Typography>ID: {pokemon.id}</Typography> : null}\n                {pokemon.number ? <Typography>Number: {pokemon.number}</Typography> : null}\n                {pokemon.name ? <Typography>Name: {pokemon.name}</Typography> : null}\n                {pokemon.weight ? <Typography>Weight: {pokemon.weight}</Typography> : null}\n                {pokemon.height ? <Typography>Height: {pokemon.height}</Typography> : null}\n                {pokemon.classification ? <Typography>Classification: {pokemon.classification}</Typography> : null}\n                </Paper>\n              </Grid>\n              ))\n              : null\n              : null\n            }\n      <Grid item xs={12} sm={12}>\n        <Paper className={classes.paper}>\n          <Typography variant=\"h5\">Returned Data from Server</Typography>\n          <Box p={2}>\n            <Divider orientation=\"horizontal\" />\n          </Box>\n          <textarea readOnly className={classes.customArea} value={data ? data.pokemons ? `{\"pokemons\":[\\n` + data.pokemons.map((pokemon,index) => (JSON.stringify(pokemon)+\"\\n\")) + \"]}\" : \"\" : \"\"}></textarea>\n        </Paper>\n      </Grid>\n    </Grid>\n    </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache({\n  addTypename: false\n});\nconst link = new HttpLink({\n  uri: 'https://graphql-pokemon.now.sh/'\n})\n\nconst client = new ApolloClient({\n  cache,\n  link\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}