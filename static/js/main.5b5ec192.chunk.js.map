{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","primary","background","paper2","customArea","width","resize","borderRadius","overflow","outline","minHeight","firstGrid","marginTop","pokeImg","height","pokeEvoImg","specialCheck","App","useState","cbId","cbNumber","cbName","weight","cbClassification","cbTypes","cbResistant","attacks","cbWeaknesses","cbFleeRate","cbMaxCP","cbEvolutions","evolutionRequirements","cbMaxHP","cbImage","cbEvolutionImage","cbEvolutionId","cbEvolutionNumber","cbEvolutionName","query","setQuery","React","state","setState","stringQuery","setStringQuery","GET_POKEMON_INFO","gql","useQuery","data","loading","error","handleChange","event","target","checked","name","isOneCheckedQuery2","alert","isOneCheckedQuery1","useEffect","newQuery","concat","createQuery","classes","className","CssBaseline","Grid","container","justify","item","xs","maingrid","sm","Paper","Typography","variant","Box","p","Divider","orientation","direction","FormControlLabel","control","Checkbox","onChange","label","disabled","readOnly","value","pt","alignItems","href","console","log","pokemons","map","pokemon","index","key","image","src","alt","id","number","classification","fleeRate","toFixed","maxCP","maxHP","types","toString","resistant","weaknesses","evolutions","pokemonEvo","pb","wrap","JSON","stringify","Boolean","window","location","hostname","match","cache","InMemoryCache","addTypename","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5b5ec192.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Grid, Paper, Typography, Divider, Box, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    background: '#f2f2f2',\n  },\n  paper2: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n  },\n  customArea: {\n    width: '100%',\n    resize: 'none',\n    background: 'linear-gradient(45deg, #3B3B3B 30%, #515151 90%)',\n    borderRadius: 10,\n    color: '#ffffff',\n    overflow: 'scroll',\n    outline: 'none',\n    minHeight: '250px',\n  },\n  firstGrid: {\n    marginTop: 15,\n  },\n  pokeImg: {\n    width: 150,\n    height: 150,\n  },\n  pokeEvoImg: {\n    width: 50,\n    height: 50,\n  },\n  specialCheck: {\n    color: \"#0000ff\",\n  }\n}));\n\nfunction App() {\n  const [query,setQuery] = useState({\n    cbId: false,\n    cbNumber: true,\n    cbName: true,\n    weight: false,                 // Array PokemonWeight\n    height: false,                 // Array PokemonDimension\n    cbClassification: false, \n    cbTypes: false,                  // Array String\n    cbResistant: false,              // Array String\n    attacks: false,                // Array PokemonAttack\n    cbWeaknesses: false,               // Array String\n    cbFleeRate: false,\n    cbMaxCP: false,\n    cbEvolutions: false,             // Array Pokemon\n    evolutionRequirements: false,  // Array PokemonEvolutionRequirement\n    cbMaxHP: false,\n    cbImage: true,\n    cbEvolutionImage: true,\n    cbEvolutionId: false,\n    cbEvolutionNumber: false,\n    cbEvolutionName: false,\n  });\n\n  const [state, setState] = React.useState({\n    cbId: false,\n    cbNumber: true,\n    cbName: true,\n    cbImage: true,\n    cbClassification: false,\n    cbFleeRate: false,\n    cbMaxCP: false,\n    cbMaxHP: false,\n    cbTypes: false,\n    cbResistant: false,\n    cbWeaknesses: false,\n    cbEvolutions: false,\n    cbEvolutionImage: true,\n    cbEvolutionId: false,\n    cbEvolutionNumber: false,\n    cbEvolutionName: false,\n  });\n\n  const [stringQuery, setStringQuery] = useState(`{\\n  pokemons(first: 60) {\\n\\tnumber,\\n\\tname,\\n\\timage,\\n  }\\n}`);\n\n  function createQuery() {\n    let newQuery = `{\\n  pokemons(first: 30) {\\n`;\n    (query.cbId !== false ? newQuery = newQuery.concat(\"\\tid,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbNumber !== false ? newQuery = newQuery.concat(\"\\tnumber,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbName !== false ? newQuery = newQuery.concat(\"\\tname,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbClassification !== false ? newQuery = newQuery.concat(\"\\tclassification,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbFleeRate !== false ? newQuery = newQuery.concat(\"\\tfleeRate,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbMaxCP !== false ? newQuery = newQuery.concat(\"\\tmaxCP,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbMaxHP !== false ? newQuery = newQuery.concat(\"\\tmaxHP,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbTypes !== false ? newQuery = newQuery.concat(\"\\ttypes,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbResistant !== false ? newQuery = newQuery.concat(\"\\tresistant,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbWeaknesses !== false ? newQuery = newQuery.concat(\"\\tweaknesses,\\n\") : newQuery = newQuery.concat(\"\"));\n    (query.cbImage !== false ? newQuery = newQuery.concat(\"\\timage,\\n\") : newQuery = newQuery.concat(\"\"));\n\n    if(query.cbEvolutions !== false) {\n      newQuery = newQuery.concat(`\\tevolutions {\\n`);\n      (query.cbEvolutionId !== false ? newQuery = newQuery.concat(\"\\t\\tid,\\n\") : newQuery = newQuery.concat(\"\"));\n      (query.cbEvolutionNumber !== false ? newQuery = newQuery.concat(\"\\t\\tnumber,\\n\") : newQuery = newQuery.concat(\"\"));\n      (query.cbEvolutionName !== false ? newQuery = newQuery.concat(\"\\t\\tname,\\n\") : newQuery = newQuery.concat(\"\"));\n      (query.cbEvolutionImage !== false ? newQuery = newQuery.concat(\"\\t\\timage,\\n\") : newQuery = newQuery.concat(\"\"));\n      newQuery = newQuery.concat(`\\t}\\n`)\n    }\n\n    newQuery = newQuery.concat(`  }\\n}`);\n\n    setStringQuery(newQuery);\n\n    //console.log(newQuery.toString());\n    //console.log(newQuery);\n    return\n  }\n\n  /*\n  const GET_POKEMON_INFO = gql(`\n  {\n    pokemons(first: 30) {\n      id\n      number\n      name,\n      image,\n      evolutions {\n        id,\n        number,\n        name,\n        image\n      }\n    }\n  }`);\n  */\n\n  const GET_POKEMON_INFO = gql(stringQuery);\n  const {data, loading, error} = useQuery(GET_POKEMON_INFO);\n\n  function isOneCheckedQuery1() {\n    let checked = 0;\n    if (state.cbId) \n      checked += 1;\n    if (state.cbNumber) \n      checked += 1;\n    if (state.cbName) \n      checked += 1;\n    if (state.cbImage) \n      checked += 1;\n    if (state.cbFleeRate) \n      checked += 1;\n    if (state.cbMaxCP) \n      checked += 1;\n    if (state.cbMaxHP) \n      checked += 1;\n    if (state.cbTypes) \n      checked += 1;\n    if (state.cbResistant) \n      checked += 1;\n    if (state.cbWeaknesses) \n      checked += 1;\n\n    if (checked > 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function isOneCheckedQuery2() {\n    let checked = 0;\n    if (state.cbEvolutionId) \n      checked += 1;\n    if (state.cbEvolutionNumber) \n      checked += 1;\n    if (state.cbEvolutionName) \n      checked += 1;\n    if (state.cbEvolutionImage) \n      checked += 1;\n\n    if (checked > 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const handleChange = (event) => {\n    if (!event.target.checked) {\n      if (event.target.name == \"cbEvolutionId\" ||event.target.name == \"cbEvolutionNumber\" ||\n          event.target.name == \"cbEvolutionImage\" ||event.target.name == \"cbEvolutionName\" ) {\n            if (!isOneCheckedQuery2()) {\n              return alert(\"GraphQL needs at least one variable in the Evolutions Query!\")\n            }    \n      } else {\n        if (!isOneCheckedQuery1()) {\n          return alert(\"GraphQL needs at least one variable in the query!\")\n        }\n      }\n    }\n    setState({ ...state, [event.target.name]: event.target.checked });\n    setQuery({...query, [event.target.name]: event.target.checked})\n  };\n\n  useEffect(() => {\n    createQuery();\n  },[query]);\n\n  function graphSearch() {\n    GET_POKEMON_INFO = gql()\n  }\n\n  const classes = styles();\n\n  return (\n    <div className={classes.root}>\n    <CssBaseline />\n    <Grid container justify=\"center\" className={classes.firstGrid}>\n    <Grid container item xs={11} className={classes.maingrid} spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\">Search Control for API</Typography>\n            <Box p={2}>\n              <Divider orientation=\"horizontal\" />\n            </Box>\n            <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12} sm={12}>\n\n            </Grid>\n            <Grid item xs={6} sm={6}>\n              <Paper className={classes.paper2}>\n                <Typography variant=\"body1\">Pokemon Attributes</Typography>\n                <Divider orientation=\"horizontal\" />\n                <Grid item container justify=\"space-between\">\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbId} onChange={handleChange} name=\"cbId\" />}\n                  label=\"ID\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbNumber} onChange={handleChange} name=\"cbNumber\" />}\n                  label=\"Number\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbName} onChange={handleChange} name=\"cbName\" />}\n                  label=\"Name\"\n                />\n                \n                <FormControlLabel\n                  control={<Checkbox checked={state.cbImage} onChange={handleChange} name=\"cbImage\" />}\n                  label=\"Image\"\n                />\n\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbClassification} onChange={handleChange} name=\"cbClassification\" />}\n                  label=\"Classification\"\n                />\n\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbFleeRate} onChange={handleChange} name=\"cbFleeRate\" />}\n                  label=\"Flee Rate\"\n                />\n\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbMaxCP} onChange={handleChange} name=\"cbMaxCP\" />}\n                  label=\"Max CP\"\n                />\n\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbMaxHP} onChange={handleChange} name=\"cbMaxHP\" />}\n                  label=\"Max HP\"\n                />\n\n                <FormControlLabel\n                  control={<Checkbox checked={state.cbTypes} onChange={handleChange} name=\"cbTypes\" />}\n                  label=\"Types\"\n                />                \n                \n              <FormControlLabel\n                control={<Checkbox checked={state.cbResistant} onChange={handleChange} name=\"cbResistant\" />}\n                label=\"Resistant\"\n              />                \n            \n              <FormControlLabel\n                control={<Checkbox checked={state.cbWeaknesses} onChange={handleChange} name=\"cbWeaknesses\" />}\n                label=\"Weaknesses\"\n              /> \n\n              <FormControlLabel\n                className={classes.specialCheck}\n                control={<Checkbox className={classes.specialCheck} checked={state.cbEvolutions} onChange={handleChange} name=\"cbEvolutions\" />}\n                label=\"Evolutions\"\n              />\n              </Grid>\n              </Paper>\n              </Grid>\n              <Grid item xs={6} sm={6}>\n              <Paper className={classes.paper2}>\n              <Typography variant=\"body1\">Pokemon Evolutions</Typography>\n              <Divider orientation=\"horizontal\" />\n              <FormControlLabel\n                control={<Checkbox checked={state.cbEvolutionId} disabled={!state.cbEvolutions} onChange={handleChange} name=\"cbEvolutionId\" />}\n                label=\"ID\"\n              />\n\n              <FormControlLabel\n                control={<Checkbox checked={state.cbEvolutionNumber} disabled={!state.cbEvolutions} onChange={handleChange} name=\"cbEvolutionNumber\" />}\n                label=\"Number\"\n              />\n\n              <FormControlLabel\n                control={<Checkbox checked={state.cbEvolutionName} disabled={!state.cbEvolutions} onChange={handleChange} name=\"cbEvolutionName\" />}\n                label=\"Name\"\n              />\n\n              <FormControlLabel\n                control={<Checkbox checked={state.cbEvolutionImage} disabled={!state.cbEvolutions} onChange={handleChange} name=\"cbEvolutionImage\" />}\n                label=\"Image\"\n              />\n              </Paper>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\">GraphQL Query</Typography>\n            <Box p={2}>\n              <Divider orientation=\"horizontal\" />\n            </Box>\n            <textarea readOnly className={classes.customArea} value={stringQuery}></textarea>\n            <Box pt={1}>\n              <Grid container item alignItems=\"center\" justify=\"center\">\n              Try that query in the official Graphql server: <a href=\"https://graphql-pokemon.now.sh\" target=\"_blank\">https://graphql-pokemon.now.sh</a>\n              </Grid> \n            </Box>\n          </Paper>\n        </Grid>\n            { console.log(data) }\n            { loading ? <p>Loading...</p> : null}\n            { error ? <p>{error}</p> : null }\n            { data ?\n              data.pokemons ?\n              data.pokemons.map((pokemon,index) => (\n              <Grid item xs={12} sm={3} key={index}>\n                <Paper className={classes.paper2}>\n                {pokemon.image ? <img src={pokemon.image} className={classes.pokeImg} alt=\"Pokemon\"/> : null}\n                {pokemon.id ? <Typography><b>ID:</b> {pokemon.id}</Typography> : null}\n                {pokemon.number ? <Typography><b>Number:</b> {pokemon.number}</Typography> : null}\n                {pokemon.name ? <Typography><b>Name:</b> {pokemon.name}</Typography> : null}\n                {pokemon.weight ? <Typography><b>Weight:</b> {pokemon.weight}</Typography> : null}\n                {pokemon.height ? <Typography><b>Height:</b> {pokemon.height}</Typography> : null}\n                {pokemon.classification ? <Typography><b>Classification:</b> {pokemon.classification}</Typography> : null}\n                {pokemon.fleeRate ? <Typography><b>Flee Rate:</b> {(pokemon.fleeRate*100).toFixed(2)}% </Typography> : null}\n                {pokemon.maxCP ? <Typography><b>Max CP:</b> {pokemon.maxCP}</Typography> : null}\n                {pokemon.maxHP ? <Typography><b>Max HP:</b> {pokemon.maxHP}</Typography> : null}\n                {pokemon.types ? <Typography><b>Types:</b> {pokemon.types.toString()} </Typography> : null}\n                {pokemon.resistant ? <Typography><b>Resistant:</b> {pokemon.resistant.toString()} </Typography> : null}\n                {pokemon.weaknesses ? <Typography><b>Weaknesses:</b> {pokemon.weaknesses.toString()} </Typography> : null}\n                {pokemon.evolutions ? pokemon.evolutions.map(pokemonEvo => (\n                  <div>\n                    <Box pt={1} pb={1}>\n                    <Divider orientation=\"horizontal\" />\n                    </Box>\n                    <Typography><b>Evolutions:</b></Typography>\n                    {pokemonEvo.image ? <img src={pokemonEvo.image} className={classes.pokeEvoImg} alt=\"Pokemon Evolution\"/> : null}\n                    {pokemonEvo.id ? <Typography variant=\"body2\"><b>ID:</b> {pokemonEvo.id}</Typography> : null}\n                    {pokemonEvo.number ? <Typography variant=\"body2\"><b>Number:</b> {pokemonEvo.number}</Typography> : null}\n                    {pokemonEvo.name ? <Typography variant=\"body2\"><b>Name:</b> {pokemonEvo.name}</Typography> : null}\n                  </div>\n                )) : null}\n                </Paper>\n              </Grid>\n              ))\n              : null\n              : null\n            }\n      <Grid item xs={12} sm={12}>\n        <Paper className={classes.paper}>\n          <Typography variant=\"h5\">Returned Data from Server</Typography>\n          <Box p={2}>\n            <Divider orientation=\"horizontal\" />\n          </Box>\n          <textarea wrap=\"off\" readOnly className={classes.customArea} value={data ? data.pokemons ? `{\"pokemons\":[\\n` + data.pokemons.map((pokemon,index) => (JSON.stringify(pokemon)+\"\\n\")) + \"]}\" : \"\" : \"\"}></textarea>\n        </Paper>\n      </Grid>\n    </Grid>\n    </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache({\n  addTypename: false\n});\nconst link = new HttpLink({\n  uri: 'https://graphql-pokemon.now.sh/'\n})\n\nconst client = new ApolloClient({\n  cache,\n  link\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}